#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v4.0 - OpenRouter API Manager
Gerenciador de rota√ß√£o de APIs do OpenRouter com fallback autom√°tico
"""

import os
import logging
import time
import random
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
import openai
from openai import OpenAI

logger = logging.getLogger(__name__)

class OpenRouterAPIManager:
    """Gerenciador de rota√ß√£o de APIs do OpenRouter"""
    
    def __init__(self):
        self.base_url = "https://openrouter.ai/api/v1"
        self.api_keys = self._load_api_keys()
        self.current_key_index = 0
        self.key_usage_stats = {}
        self.key_cooldowns = {}
        self.max_retries = 3
        self.retry_delay = 2
        
        # Inicializa estat√≠sticas para cada chave
        for key in self.api_keys:
            self.key_usage_stats[key] = {
                'requests': 0,
                'errors': 0,
                'last_used': None,
                'credits_exhausted': False,
                'rate_limited': False
            }
        
        logger.info(f"üîÑ OpenRouter API Manager inicializado com {len(self.api_keys)} chaves")
    
    def _load_api_keys(self) -> List[str]:
        """Carrega todas as chaves de API dispon√≠veis"""
        keys = []
        
        # Chave principal
        main_key = os.getenv('OPENROUTER_API_KEY')
        if main_key:
            keys.append(main_key)
        
        # Chaves adicionais
        for i in range(1, 10):  # Suporte at√© 10 chaves
            key = os.getenv(f'OPENROUTER_API_KEY_{i}')
            if key:
                keys.append(key)
        
        if not keys:
            raise ValueError("Nenhuma chave OpenRouter encontrada nas vari√°veis de ambiente")
        
        return keys
    
    def _get_next_available_key(self) -> str:
        """Obt√©m a pr√≥xima chave dispon√≠vel na rota√ß√£o"""
        attempts = 0
        initial_index = self.current_key_index
        
        while attempts < len(self.api_keys):
            key = self.api_keys[self.current_key_index]
            stats = self.key_usage_stats[key]
            
            # Verifica se a chave est√° em cooldown
            if key in self.key_cooldowns:
                cooldown_until = self.key_cooldowns[key]
                if datetime.now() < cooldown_until:
                    logger.debug(f"Chave {key[:10]}... em cooldown at√© {cooldown_until}")
                    self._rotate_to_next_key()
                    attempts += 1
                    continue
                else:
                    # Remove do cooldown
                    del self.key_cooldowns[key]
                    stats['credits_exhausted'] = False # Resetar ap√≥s cooldown
                    stats['rate_limited'] = False # Resetar ap√≥s cooldown
            
            # Verifica se a chave n√£o est√° com problemas permanentes (cr√©ditos esgotados)
            if not stats['credits_exhausted'] and not stats['rate_limited']:
                return key
            
            # Se chegou aqui, a chave tem problemas, tenta a pr√≥xima
            self._rotate_to_next_key()
            attempts += 1
            
            # Se todas as chaves foram verificadas e nenhuma est√° dispon√≠vel
            if attempts == len(self.api_keys) and self.current_key_index == initial_index:
                self._notify_all_keys_exhausted()
                # Fallback: tenta usar a chave com menos erros ou a primeira dispon√≠vel que n√£o esteja em cooldown
                for k in self.api_keys:
                    if k not in self.key_cooldowns and not self.key_usage_stats[k]['credits_exhausted']:
                        logger.warning(f"‚ö†Ô∏è Todas as chaves com problemas, usando a primeira dispon√≠vel: {k[:10]}...")
                        return k
                # Se realmente todas est√£o esgotadas ou em cooldown, retorna a primeira para for√ßar o erro
                logger.error("‚ùå Todas as chaves OpenRouter est√£o esgotadas ou em cooldown. Nenhuma chave dispon√≠vel.")
                raise Exception("Todas as chaves OpenRouter est√£o esgotadas ou em cooldown.") # Levanta exce√ß√£o para indicar falha

        # Se todas as chaves t√™m problemas, usa a com menos erros (caso de fallback extremo)
        best_key = min(self.api_keys, key=lambda k: self.key_usage_stats[k]['errors'])
        logger.warning(f"‚ö†Ô∏è Todas as chaves t√™m problemas, usando a melhor: {best_key[:10]}...")
        return best_key
    
    def _rotate_to_next_key(self):
        """Rotaciona para a pr√≥xima chave"""
        self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
    
    def _handle_api_error(self, key: str, error: Exception):
        """Trata erros de API e atualiza estat√≠sticas"""
        stats = self.key_usage_stats[key]
        stats['errors'] += 1
        
        error_str = str(error).lower()
        
        # Erro 402 - Cr√©ditos insuficientes (cooldown mais longo)
        if '402' in error_str or 'credit' in error_str or 'payment' in error_str:
            stats['credits_exhausted'] = True
            # Cooldown de 1 hora para chaves sem cr√©ditos
            self.key_cooldowns[key] = datetime.now() + timedelta(hours=1)
            logger.warning(f"üí≥ Chave {key[:10]}... sem cr√©ditos. Cooldown de 1 hora.")
        
        # Erro 429 - Rate limit
        elif '429' in error_str or 'rate limit' in error_str:
            stats['rate_limited'] = True
            # Cooldown de 5 minutos para rate limit
            self.key_cooldowns[key] = datetime.now() + timedelta(minutes=5)
            logger.warning(f"‚è±Ô∏è Chave {key[:10]}... em rate limit. Cooldown de 5 minutos.")
        
        # Outros erros - cooldown menor
        else:
            self.key_cooldowns[key] = datetime.now() + timedelta(seconds=30)
            logger.warning(f"‚ö†Ô∏è Erro na chave {key[:10]}...: {error}. Cooldown de 30 segundos.")
    
    def _notify_all_keys_exhausted(self):
        """Notifica quando todas as chaves est√£o esgotadas ou em cooldown"""
        all_exhausted = True
        for key in self.api_keys:
            stats = self.key_usage_stats[key]
            if not stats['credits_exhausted'] and key not in self.key_cooldowns:
                all_exhausted = False
                break
        
        if all_exhausted:
            logger.critical("üö® ATEN√á√ÉO: Todas as chaves OpenRouter est√£o esgotadas ou em cooldown. A an√°lise pode ser comprometida. Por favor, recarregue seus cr√©ditos ou adicione novas chaves.")

    def _create_client(self, api_key: str) -> OpenAI:
        """Cria cliente OpenAI com a chave especificada"""
        return OpenAI(
            base_url=self.base_url,
            api_key=api_key
        )
    
    async def chat_completion(self, **kwargs) -> Any:
        """Executa chat completion com rota√ß√£o autom√°tica de chaves"""
        last_error = None
        
        for attempt in range(self.max_retries):
            try:
                # Obt√©m chave dispon√≠vel
                api_key = self._get_next_available_key()
                client = self._create_client(api_key)
                
                # Atualiza estat√≠sticas
                stats = self.key_usage_stats[api_key]
                stats['requests'] += 1
                stats['last_used'] = datetime.now()
                
                logger.debug(f"üîë Usando chave {api_key[:10]}... (tentativa {attempt + 1})")
                
                # Faz a requisi√ß√£o
                response = client.chat.completions.create(**kwargs)
                
                # Sucesso - rotaciona para pr√≥xima chave para distribuir carga
                self._rotate_to_next_key()
                
                return response
                
            except openai.APIStatusError as e:
                last_error = e
                self._handle_api_error(api_key, e)
                if e.status_code == 402: # Erro 402 √© fatal para a chave
                    logger.error(f"‚ùå Erro 402 (Pagamento Requerido) na chave {api_key[:10]}.... Abortando tentativas com esta chave.")
                    raise # Propaga o erro 402 imediatamente
                
                # Se n√£o √© o √∫ltimo attempt, aguarda antes de tentar novamente
                if attempt < self.max_retries - 1:
                    delay = self.retry_delay * (2 ** attempt) + random.uniform(0, 1)
                    logger.info(f"‚è≥ Aguardando {delay:.1f}s antes da pr√≥xima tentativa...")
                    time.sleep(delay)
                
                continue
            except Exception as e:
                last_error = e
                self._handle_api_error(api_key, e)
                
                # Se n√£o √© o √∫ltimo attempt, aguarda antes de tentar novamente
                if attempt < self.max_retries - 1:
                    delay = self.retry_delay * (2 ** attempt) + random.uniform(0, 1)
                    logger.info(f"‚è≥ Aguardando {delay:.1f}s antes da pr√≥xima tentativa...")
                    time.sleep(delay)
                
                continue
        
        # Se chegou aqui, todas as tentativas falharam
        logger.error(f"‚ùå Todas as tentativas falharam. √öltimo erro: {last_error}")
        raise last_error
    
    def get_api_status(self) -> Dict[str, Any]:
        """Retorna status das APIs"""
        status = {
            'total_keys': len(self.api_keys),
            'current_key_index': self.current_key_index,
            'keys_status': []
        }
        
        for i, key in enumerate(self.api_keys):
            stats = self.key_usage_stats[key]
            key_status = {
                'index': i,
                'key_preview': f"{key[:10]}...{key[-4:]}",
                'requests': stats['requests'],
                'errors': stats['errors'],
                'last_used': stats['last_used'].isoformat() if stats['last_used'] else None,
                'credits_exhausted': stats['credits_exhausted'],
                'rate_limited': stats['rate_limited'],
                'in_cooldown': key in self.key_cooldowns,
                'available': not stats['credits_exhausted'] and not stats['rate_limited'] and key not in self.key_cooldowns
            }
            
            if key in self.key_cooldowns:
                key_status['cooldown_until'] = self.key_cooldowns[key].isoformat()
            
            status['keys_status'].append(key_status)
        
        # Estat√≠sticas gerais
        total_requests = sum(stats['requests'] for stats in self.key_usage_stats.values())
        total_errors = sum(stats['errors'] for stats in self.key_usage_stats.values())
        available_keys = sum(1 for key_status in status['keys_status'] if key_status['available'])
        
        status['summary'] = {
            'total_requests': total_requests,
            'total_errors': total_errors,
            'error_rate': (total_errors / total_requests * 100) if total_requests > 0 else 0,
            'available_keys': available_keys,
            'health_status': 'healthy' if available_keys > 0 else 'degraded'
        }
        
        return status
    
    def reset_key_status(self, key_index: Optional[int] = None):
        """Reseta status de uma chave espec√≠fica ou todas"""
        if key_index is not None:
            if 0 <= key_index < len(self.api_keys):
                key = self.api_keys[key_index]
                self.key_usage_stats[key].update({
                    'credits_exhausted': False,
                    'rate_limited': False
                })
                if key in self.key_cooldowns:
                    del self.key_cooldowns[key]
                logger.info(f"‚úÖ Status da chave {key[:10]}... resetado")
            else:
                logger.error(f"‚ùå √çndice de chave inv√°lido: {key_index}")
        else:
            # Reseta todas as chaves
            for key in self.api_keys:
                self.key_usage_stats[key].update({
                    'credits_exhausted': False,
                    'rate_limited': False
                })
            self.key_cooldowns.clear()
            logger.info("‚úÖ Status de todas as chaves resetado")

# Inst√¢ncia global
openrouter_manager = OpenRouterAPIManager()



